name: Lichess Bot Runner

concurrency:
  group: lichess-bot-runner
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Bot Mode'
        type: choice
        required: true
        options:
          - normal
          - matchmaking
          - tournament
      tournament_id:
        description: 'Tournament ID (if tournament mode)'
        type: string
        required: false
      team_id:
        description: 'Team ID (optional)'
        type: string
        required: false
  schedule:
    - cron: '0 */6 * * *'
  push:
    branches: [ main ]
    paths:
      - '**.py'
      - 'config.yml'

permissions:
  actions: write
  contents: write

jobs:
  bot-runner:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install tenacity pyyaml

      - name: Setup Stockfish Engine
        run: |
          mkdir -p engines
          sudo apt-get update && sudo apt-get install -y unzip
          curl -L -o stockfish.zip http://abrok.eu/stockfish/latest/linux/stockfish_x64_modern.zip
          unzip -o stockfish.zip -d engines/
          mv engines/stockfish_* engines/stockfish
          chmod +x engines/stockfish

      - name: Setup Other Engines Permissions
        run: |
          if [ -f "engines/fsf" ]; then
            chmod +x engines/fsf
          fi
          if [ -f "engines/ShashChess39" ]; then
            chmod +x engines/ShashChess39
          fi

      - name: Inject Lichess Bot Token
        env:
          LICHESS_TOKEN: ${{ secrets.LICHESS_TOKEN }}
        run: |
          python3 << 'EOF'
          import os, yaml
          token = os.environ.get("LICHESS_TOKEN")
          if not token:
              print("ERROR: LICHESS_TOKEN secret is missing!")
              exit(1)
          with open("config.yml","r") as f:
              config = yaml.safe_load(f) or {}
          config["token"] = token
          with open("config.yml","w") as f:
              yaml.dump(config,f, default_flow_style=False)
          print("✅ Token injected successfully")
          EOF

      - name: Launch Bot
        run: |
          CMD="python3 -u user_interface.py"

          case "${{ github.event.inputs.mode }}" in
            "matchmaking")
              CMD="$CMD matchmaking"
              ;;
            "tournament")
              if [[ -n "${{ github.event.inputs.tournament_id }}" ]]; then
                TOUR_ID="${{ github.event.inputs.tournament_id }}"
                TEAM_ID="${{ github.event.inputs.team_id }}"
                [[ -z "$TEAM_ID" ]] && TEAM_ID="''"
                PASSWORD="${{ secrets.TOURNAMENT_PASSWORD }}"
                [[ -z "$PASSWORD" ]] && PASSWORD="''"

                echo "⚡ Attempting to join tournament $TOUR_ID..."
                TIMEOUT=$((60*10))   # 10 minutes max retry
                INTERVAL=60
                ELAPSED=0

                while true; do
                  DEBUG_CMD="$CMD tournament $TOUR_ID $TEAM_ID $PASSWORD"
                  echo "DEBUG: Running $DEBUG_CMD"
                  $DEBUG_CMD && break
                  ELAPSED=$((ELAPSED+INTERVAL))
                  if [ $ELAPSED -ge $TIMEOUT ]; then
                    echo "⚠️ Timeout reached. Could not join tournament $TOUR_ID."
                    exit 1
                  fi
                  echo "Tournament not ready or invalid ID. Retrying in $INTERVAL seconds..."
                  sleep $INTERVAL
                done
              else
                echo "⚠️ Tournament ID missing. Running normal mode instead."
                CMD="$CMD normal"
              fi
              ;;
            *)
              CMD="$CMD normal"
              ;;
          esac

          if [[ "${{ github.event.inputs.mode }}" != "tournament" ]]; then
            echo "DEBUG: Running $CMD"
            eval "$CMD"
          fi
